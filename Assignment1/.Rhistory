seg_res <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
}
}
colnames(results) <- c('experimental_Ss', 'control_Ss', 'p_value')
## if no results are significant, let us know now
if (length(results) == 0){
return("Statistical significance not possible under these parameters")
}
## split into high and low control group breakdowns, and sort all significant results from p-values high --> low
best_case <- results %>% arrange(desc(p_value))
##more_con <- results %>% filter(experimental_Ss < control_Ss, p_value < 0.05) %>% arrange(desc(p_value))
if (plot == TRUE){
## plot p values of all breakdowns
p <- ggplot(results, aes(x=control_Ss, y=p_value)) +
geom_point(size=1, col="orangered2") +
labs(title = "Significance v. Control Group Size", x = "Control Group Size", y="Significance (p)") +
theme_minimal() +
geom_hline(yintercept = 0.05)
plot(p)
}
## return the control group sizes at the limits of significance
print(paste0("Minimum control group size is ", best_case$control_Ss[1], " (p = ", format(round(more_exp$p_value[1], 4), nsmall = 4), ")."))
}
sigTest(10000, 0.03, 0.03)
library(dplyr)
library(ggplot2)
## KNOWN: Total buyer universe (customers, int expected)
##
## GOAL: Maximize test customer while allowing a p < .05 stat read using prop.test() with:
##
## GIVEN: a base response rate (base_resp, num) and a percentage point difference I wish to read  (percent_goal, num)
sigTest <- function(customers, base_resp, percent_goal, plot = FALSE){
results <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
seg_res <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
status_check <- seq(from = 5000, to=1000000, by = 5000)
segments <- c(status_check, customers/2)
## test results for every possible experimental group size
for(i in 1:(customers/2)) {
## determine experimental and control group sizes and determine response sizes for both groups
experiment = customers-i
control = i
targeted = c(experiment, control)
buyers = c(round((base_resp + percent_goal) * experiment), round(control *base_resp))
## run statistical test and store breakdown with the p value
x <- prop.test(buyers, targeted)
p_value <- (x$p.value)
if (p_value < 0.05) {
new_record <-c(experiment, control, p_value)
seg_res <- rbind(seg_res,  new_record)
}
if (i %in% segments & length(seg_res) > 0){
colnames(seg_res) <- c('experimental_Ss', 'control_Ss', 'p_value')
seg_sorted <- seg_res %>% arrange(desc(p_value))
results <- rbind(results, seg_sorted[1,])
seg_res <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
}
}
colnames(results) <- c('experimental_Ss', 'control_Ss', 'p_value')
## if no results are significant, let us know now
if (length(results) == 0){
return("Statistical significance not possible under these parameters")
}
## split into high and low control group breakdowns, and sort all significant results from p-values high --> low
sorted_res <- results %>% arrange(desc(p_value))
##more_con <- results %>% filter(experimental_Ss < control_Ss, p_value < 0.05) %>% arrange(desc(p_value))
if (plot == TRUE){
## plot p values of all breakdowns
p <- ggplot(results, aes(x=control_Ss, y=p_value)) +
geom_point(size=1, col="orangered2") +
labs(title = "Significance v. Control Group Size", x = "Control Group Size", y="Significance (p)") +
theme_minimal() +
geom_hline(yintercept = 0.05)
plot(p)
}
## return the control group sizes at the limits of significance
print(paste0("Minimum control group size is ", sorted_res$control_Ss[1], " (p = ", format(round(sorted_res$p_value[1], 4), nsmall = 4), ")."))
}
sigTest(10000, 0.03, 0.03)
library(dplyr)
library(ggplot2)
## KNOWN: Total buyer universe (customers, int expected)
##
## GOAL: Maximize test customer while allowing a p < .05 stat read using prop.test() with:
##
## GIVEN: a base response rate (base_resp, num) and a percentage point difference I wish to read  (percent_goal, num)
sigTest <- function(customers, base_resp, percent_goal, plot = FALSE){
results <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
status_check <- seq(from = 5000, to=1000000, by = 5000)
## test results for every possible experimental group size
for(i in 1:(customers-1)) {
## determine experimental and control group sizes and determine response sizes for both groups
experiment = customers-i
control = i
targeted = c(experiment, control)
buyers = c(round((base_resp + percent_goal) * experiment), round(control *base_resp))
## run statistical test and store breakdown with the p value
x <- prop.test(buyers, targeted)
p_value <- (x$p.value)
new_record <-c(experiment, control, p_value)
results <- rbind(results,  new_record)
if (i %in% status_check){
print(paste(i, "cases tested so far"))
}
}
colnames(results) <- c('experimental_Ss', 'control_Ss', 'p_value')
## if no results are significant, let us know now
if (nrow(filter(results, p_value<0.05)) == 0){
return("Statistical significance not possible under these parameters")
}
## split into high and low control group breakdowns, and sort all significant results from p-values high --> low
more_exp <- results %>% filter(experimental_Ss >= control_Ss, p_value < 0.05) %>% arrange(desc(p_value))
more_con <- results %>% filter(experimental_Ss < control_Ss, p_value < 0.05) %>% arrange(desc(p_value))
if (plot == TRUE){
## plot p values of all breakdowns
p <- ggplot(results, aes(x=control_Ss, y=p_value)) +
geom_point(size=1, col="orangered2") +
labs(title = "Significance v. Control Group Size", x = "Control Group Size", y="Significance (p)") +
theme_minimal() +
geom_hline(yintercept = 0.05)
plot(p)
}
## return the control group sizes at the limits of significance
print(paste0("Minimum control group size is ", more_exp$control_Ss[1], " (p = ", format(round(more_exp$p_value[1], 4), nsmall = 4), ")."))
}
sigTest(10000, 0.03, 0.03)
sigTest(5000, 0.03, 0.02)
sigTest(5000, 0.03, 0.01)
sigTest(20000, .12, .05)
sigTest(50000, .37, .03)
library(dplyr)
library(ggplot2)
## KNOWN: Total buyer universe (customers, int expected)
##
## GOAL: Maximize test customer while allowing a p < .05 stat read using prop.test() with:
##
## GIVEN: a base response rate (base_resp, num) and a percentage point difference I wish to read  (percent_goal, num)
sigTest <- function(customers, base_resp, percent_goal, plot = FALSE){
results <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
seg_res <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
status_check <- seq(from = 5000, to=1000000, by = 5000)
segments <- c(status_check, customers/2)
## test results for every possible experimental group size
for(i in 1:(customers/2)) {
## determine experimental and control group sizes and determine response sizes for both groups
experiment = customers-i
control = i
targeted = c(experiment, control)
buyers = c(round((base_resp + percent_goal) * experiment), round(control *base_resp))
## run statistical test and store breakdown with the p value
x <- prop.test(buyers, targeted)
p_value <- (x$p.value)
if (p_value < 0.05) {
new_record <-c(experiment, control, p_value)
seg_res <- rbind(seg_res,  new_record)
}
if (i %in% segments & length(seg_res) > 0){
colnames(seg_res) <- c('experimental_Ss', 'control_Ss', 'p_value')
seg_sorted <- seg_res %>% arrange(desc(p_value))
results <- rbind(results, seg_sorted[1,])
seg_res <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
}
}
colnames(results) <- c('experimental_Ss', 'control_Ss', 'p_value')
## if no results are significant, let us know now
if (length(results) == 0){
return("Statistical significance not possible under these parameters")
}
## split into high and low control group breakdowns, and sort all significant results from p-values high --> low
sorted_res <- results %>% arrange(desc(p_value))
##more_con <- results %>% filter(experimental_Ss < control_Ss, p_value < 0.05) %>% arrange(desc(p_value))
if (plot == TRUE){
## plot p values of all breakdowns
p <- ggplot(results, aes(x=control_Ss, y=p_value)) +
geom_point(size=1, col="orangered2") +
labs(title = "Significance v. Control Group Size", x = "Control Group Size", y="Significance (p)") +
theme_minimal() +
geom_hline(yintercept = 0.05)
plot(p)
}
## return the control group sizes at the limits of significance
print(paste0("Minimum control group size is ", sorted_res$control_Ss[1], " (p = ", format(round(sorted_res$p_value[1], 4), nsmall = 4), ")."))
}
sigTest(5000, 0.03, 0.02)
sigTest(5000, 0.03, 0.01)
library(dplyr)
library(ggplot2)
## KNOWN: Total buyer universe (customers, int expected)
##
## GOAL: Maximize test customer while allowing a p < .05 stat read using prop.test() with:
##
## GIVEN: a base response rate (base_resp, num) and a percentage point difference I wish to read  (percent_goal, num)
sigTest <- function(customers, base_resp, percent_goal, plot = FALSE){
results <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
seg_res <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
status_check <- seq(from = 5000, to=1000000, by = 5000)
segments <- c(status_check, customers/2)
## test results for every possible experimental group size
for(i in 1:(customers/2)) {
## determine experimental and control group sizes and determine response sizes for both groups
experiment = customers-i
control = i
targeted = c(experiment, control)
buyers = c(round((base_resp + percent_goal) * experiment), round(control *base_resp))
## run statistical test and store breakdown with the p value
x <- prop.test(buyers, targeted)
p_value <- (x$p.value)
if (p_value < 0.05) {
new_record <-c(experiment, control, p_value)
seg_res <- rbind(seg_res,  new_record)
}
if (i %in% segments & length(seg_res) > 0){
colnames(seg_res) <- c('experimental_Ss', 'control_Ss', 'p_value')
seg_sorted <- seg_res %>% arrange(desc(p_value))
results <- rbind(results, seg_sorted[1,])
seg_res <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
}
}
## if no results are significant, let us know now
if (length(results) == 0){
return("Statistical significance not possible under these parameters")
}
## split into high and low control group breakdowns, and sort all significant results from p-values high --> low
colnames(results) <- c('experimental_Ss', 'control_Ss', 'p_value')
sorted_res <- results %>% arrange(desc(p_value))
if (plot == TRUE){
## plot p values of all breakdowns
p <- ggplot(results, aes(x=control_Ss, y=p_value)) +
geom_point(size=1, col="orangered2") +
labs(title = "Significance v. Control Group Size", x = "Control Group Size", y="Significance (p)") +
theme_minimal() +
geom_hline(yintercept = 0.05)
plot(p)
}
## return the control group sizes at the limits of significance
print(paste0("Minimum control group size is ", sorted_res$control_Ss[1], " (p = ", format(round(sorted_res$p_value[1], 4), nsmall = 4), ")."))
}
sigTest(5000, 0.03, 0.01)
sigTest(20000, .12, .05)
sigTest(50000, .37, .03)
sigTest(2549851, 0.024, 0.005)
library(dplyr)
library(ggplot2)
## KNOWN: Total buyer universe (customers, int expected)
##
## GOAL: Maximize test customer while allowing a p < .05 stat read using prop.test() with:
##
## GIVEN: a base response rate (base_resp, num) and a percentage point difference I wish to read  (percent_goal, num)
sigTest <- function(customers, base_resp, percent_goal, plot = FALSE){
results <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
seg_res <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
# create vector to separate work into chunks
segments <- c(seq(from = 5000, to=customers, by = 5000), customers/2)
## test results for every possible experimental group size, where the control group is smaller
for(i in 1:(customers/2)) {
## determine experimental and control group sizes and determine response sizes for both groups
experiment = customers-i
control = i
targeted = c(experiment, control)
buyers = c(round((base_resp + percent_goal) * experiment), round(control *base_resp))
## run statistical test and store breakdown with the p value
x <- prop.test(buyers, targeted)
p_value <- (x$p.value)
if (p_value < 0.05) {
new_record <-c(experiment, control, p_value)
seg_res <- rbind(seg_res,  new_record)
}
if (i %in% segments & length(seg_res) > 0){
print("its time for a segment!!")
print(i)
colnames(seg_res) <- c('experimental_Ss', 'control_Ss', 'p_value')
seg_sorted <- seg_res %>% arrange(desc(p_value))
results <- rbind(results, seg_sorted[1,])
seg_res <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
}
}
## if no results are significant, let us know now
if (length(results) == 0){
return("Statistical significance not possible under these parameters")
}
## split into high and low control group breakdowns, and sort all significant results from p-values high --> low
colnames(results) <- c('experimental_Ss', 'control_Ss', 'p_value')
sorted_res <- results %>% arrange(desc(p_value))
if (plot == TRUE){
## plot p values of all breakdowns
p <- ggplot(results, aes(x=control_Ss, y=p_value)) +
geom_point(size=1, col="orangered2") +
labs(title = "Significance v. Control Group Size", x = "Control Group Size", y="Significance (p)") +
theme_minimal() +
geom_hline(yintercept = 0.05)
plot(p)
}
## return the control group sizes at the limits of significance
print(paste0("Minimum control group size is ", sorted_res$control_Ss[1], " (p = ", format(round(sorted_res$p_value[1], 4), nsmall = 4), ")."))
}
sigTest(2549851, 0.024, 0.005)
library(dplyr)
library(ggplot2)
## KNOWN: Total buyer universe (customers, int expected)
##
## GOAL: Maximize test customer while allowing a p < .05 stat read using prop.test() with:
##
## GIVEN: a base response rate (base_resp, num) and a percentage point difference I wish to read  (percent_goal, num)
sigTest <- function(customers, base_resp, percent_goal, plot = FALSE){
#initialize vectors to store full and temporary results
results <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
seg_res <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
# create vector to separate work into chunks
segments <- c(seq(from = 2000, to=customers, by = 2000), customers/2)
## test results for every possible experimental group size, where the control group is smaller
for(i in 1:(customers/2)) {
## determine experimental and control group sizes and determine response sizes for both groups
experiment = customers-i
control = i
targeted = c(experiment, control)
buyers = c(round((base_resp + percent_goal) * experiment), round(control *base_resp))
## run statistical test and store breakdown with the p value
x <- prop.test(buyers, targeted)
p_value <- (x$p.value)
# if its significant, store in our temporary list
if (p_value < 0.05) {
new_record <-c(experiment, control, p_value)
seg_res <- rbind(seg_res,  new_record)
}
# every 2000 cases, extract best result and throw out the list
if (i %in% segments & length(seg_res) > 0){
print("its time for a segment!!")
print(i)
colnames(seg_res) <- c('experimental_Ss', 'control_Ss', 'p_value')
seg_sorted <- seg_res %>% arrange(desc(p_value))
results <- rbind(results, seg_sorted[1,])
seg_res <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
}
}
## if no results are significant, let us know now
if (length(results) == 0){
return("Statistical significance not possible under these parameters")
}
## sort p-values from high to low and return the highest one
colnames(results) <- c('experimental_Ss', 'control_Ss', 'p_value')
sorted_res <- results %>% arrange(desc(p_value))
print(paste0("Minimum control group size is ", sorted_res$control_Ss[1], " (p = ", format(round(sorted_res$p_value[1], 4), nsmall = 4), ")."))
}
sigTest(2549851, 0.024, 0.005)
library(dplyr)
library(ggplot2)
## KNOWN: Total buyer universe (customers, int expected)
##
## GOAL: Maximize test customer while allowing a p < .05 stat read using prop.test() with:
##
## GIVEN: a base response rate (base_resp, num) and a percentage point difference I wish to read  (percent_goal, num)
sigTest <- function(customers, base_resp, percent_goal, plot = FALSE){
#initialize vectors to store full and temporary results
results <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
seg_res <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
# create vector to separate work into chunks
segments <- c(seq(from = 2000, to=customers, by = 2000), customers/2)
## test results for every possible experimental group size, where the control group is smaller
for(i in 1:(customers/2)) {
## determine experimental and control group sizes and determine response sizes for both groups
experiment = customers-i
control = i
targeted = c(experiment, control)
buyers = c(round((base_resp + percent_goal) * experiment), round(control *base_resp))
## run statistical test and store breakdown with the p value
x <- prop.test(buyers, targeted)
p_value <- (x$p.value)
# if its significant, store in our temporary list
if (p_value < 0.05) {
new_record <-c(experiment, control, p_value)
seg_res <- rbind(seg_res,  new_record)
}
# every 2000 cases, extract best result and throw out the list
if (i %in% segments & length(seg_res) > 0){
colnames(seg_res) <- c('experimental_Ss', 'control_Ss', 'p_value')
seg_sorted <- seg_res %>% arrange(desc(p_value))
results <- rbind(results, seg_sorted[1,])
seg_res <- data.frame(experiment_Ss=NULL, control_Ss=NULL, p_value=NULL)
}
}
## if no results are significant, let us know now
if (length(results) == 0){
return("Statistical significance not possible under these parameters")
}
## sort p-values from high to low and return the highest one
colnames(results) <- c('experimental_Ss', 'control_Ss', 'p_value')
sorted_res <- results %>% arrange(desc(p_value))
print(paste0("Minimum control group size is ", sorted_res$control_Ss[1], " (p = ", format(round(sorted_res$p_value[1], 4), nsmall = 4), ")."))
}
sigTest(2549851, 0.023, 0.001)
93752/259851
93752/2549851
sigTest(2406361, 0.021, 0.006)
2830/2406361
sigTest(2406361, 0.021, 0.001)
86899/2406361
sigTest(63651, .121, .08)
sigTest(63651, .121, .008)
library(dplyr)
library(ggplot2)
## KNOWN: Total buyer universe (customers, int expected)
##
## GOAL: Maximize test customer while allowing a p < .05 stat read using prop.test() with:
##
## GIVEN: a base response rate (base_resp, num) and a percentage point difference I wish to read  (percent_goal, num)
sigTest <- function(customers, base_resp, percent_goal, plot = FALSE){
## test results for every possible experimental group size, where the control group is smaller
for(i in 1:(customers)) {
## determine experimental and control group sizes and determine response sizes for both groups
experiment = customers-i
control = i
targeted = c(experiment, control)
buyers = c(round((base_resp + percent_goal) * experiment), round(control *base_resp))
## run statistical test and store breakdown with the p value
x <- prop.test(buyers, targeted)
p_value <- (x$p.value)
# if its significant, store in our temporary list
if (p_value < 0.05) {
return(print(paste0("Minimum control group size is ", control, " (p = ", format(round(p_value, 4), nsmall = 4), ").")))
}
}
## if no results are significant, let us know now
if (length(results) == 0){
return("Statistical significance not possible under these parameters")
}
}
sigTest(63651, .121, .08)
sigTest(63651, .121, .008)
sigTest(20000, .12, .05)
sigTest(50000, .37, .03)
library(lubridate)
library(dplyr)
library(ggplot2)
file <- "data/activity.csv"
# read and clean up data
file <- "data/activity.csv"
data <- read.csv(file, header = TRUE)
data$date <- ymd(data$date)
d <- group_by(data, date)
head(data)
d <- summarize(d, tot_steps = sum(steps))
head(d)
d
data(where(date = "2012-10-8"))
data(where(data$date = "2012-10-8"))
data(where(data$date == "2012-10-8"))
filter(data, date == "2012-10-8")
filter(data, date == "2012-10-02")
ggplot(d, aes(x=tot_steps)) + geom_histogram()
head(d, 50)
ggplot(d, aes(x=tot_steps)) + geom_histogram(binwidth = 100)
ggplot(d, aes(x=tot_steps)) + geom_histogram(binwidth = 50)
ggplot(d, aes(x=tot_steps)) + geom_histogram(binwidth = 1000)
ggplot(d, aes(x=tot_steps)) + geom_histogram(binwidth = 500)
ggplot(d, aes(x=tot_steps)) + geom_histogram()
ggplot(d, aes(x=tot_steps)) + geom_histogram(bins = 50)
summary(d$total_steps)
table(d$total_steps)
summary(d$tot_steps)
mean(d$tot_steps)
sum(d$tot_steps)
sum(d$tot_steps, na.rm = TRUE)
mean(d$tot_steps, na.rm = TRUE)
d3 <- data %>%
group_by(interval) %>%
summarize(interval = mean(steps))
d3 <- data %>%
group_by(interval) %>%
summarize(interval_mean = mean(steps))
d3
d3 <- data %>%
group_by(interval) %>%
summarize(interval_mean = mean(steps, na.rm = TRUE))
d3
d3 <- data %>%
group_by(interval) %>%
summarize(mean_steps = mean(steps, na.rm = TRUE))
max(d3$interval_mean)
d3 <- data %>%
group_by(interval) %>%
summarize(mean_steps = mean(steps, na.rm = TRUE))
max(d3$mean_steps)
data$interval <- hm(data$interval)
head(data)
data$date <- ymd(data$date)
file <- "data/activity.csv"
data <- read.csv(file, header = TRUE)
getwd()
setwd("Coursera/repr_research/Assignment1")
file <- "data/activity.csv"
data <- read.csv(file, header = TRUE)
data$date <- ymd(data$date)
head(data, 60)
ggplot(d3, aes(x = interval, y = mean_steps)) +
geom_line() +
labs(x = "5-minute interval", y = average steps taken)
ggplot(d3, aes(x = interval, y = mean_steps)) +
geom_line() +
labs(x = "5-minute interval", y = "average steps taken")
d3$interval(where(d3$mean_steps == max(d3$mean_steps))
ad
d3$interval(where(d3$mean_steps == max(d3$mean_steps)))
d3$interval[which.max(d3$mean_steps)]
head(data)
is.na(data)
nad <- is.na(data)
summary(nad[2,])
summary(nad[,2])
summary(nad[,3])
summary(nad[,1])
nas <- is.na(data$steps)
nas
sum(nas)
