sigTest(63651, .121, .08)
sigTest(63651, .121, .008)
library(dplyr)
library(ggplot2)
## KNOWN: Total buyer universe (customers, int expected)
##
## GOAL: Maximize test customer while allowing a p < .05 stat read using prop.test() with:
##
## GIVEN: a base response rate (base_resp, num) and a percentage point difference I wish to read  (percent_goal, num)
sigTest <- function(customers, base_resp, percent_goal, plot = FALSE){
## test results for every possible experimental group size, where the control group is smaller
for(i in 1:(customers)) {
## determine experimental and control group sizes and determine response sizes for both groups
experiment = customers-i
control = i
targeted = c(experiment, control)
buyers = c(round((base_resp + percent_goal) * experiment), round(control *base_resp))
## run statistical test and store breakdown with the p value
x <- prop.test(buyers, targeted)
p_value <- (x$p.value)
# if its significant, store in our temporary list
if (p_value < 0.05) {
return(print(paste0("Minimum control group size is ", control, " (p = ", format(round(p_value, 4), nsmall = 4), ").")))
}
}
## if no results are significant, let us know now
if (length(results) == 0){
return("Statistical significance not possible under these parameters")
}
}
sigTest(63651, .121, .08)
sigTest(63651, .121, .008)
sigTest(20000, .12, .05)
sigTest(50000, .37, .03)
setwd("Coursera/repr_research")
file <- "data/repdata_data_StormData.csv.bz2"
rawData <- read.csv(file, header = TRUE)
data <- rawData
str(data)
head(data)
library(dplyr)
data1 <- select(data, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
head(data1, 50)
data1 <- select(data, event = EVTYPE, fat = FATALITIES, inj = INJURIES,  pDmg = PROPDMG, pMag = PROPDMGEXP, cDmg = CROPDMG, cMag = CROPDMGEXP)
magnitude <- function(x){}
magnitude <- function(x){
if (x == "K") return 1000
summary(data1$pDmg)
summary(data1$cDmg)
table(data1$pMag)
filter(data, PROPDMGEXP == "2")
filter(data, PROPDMGEXP == "3")
dmgs <- select(data1, pDmg, pMag, cDmg, cMag)
magnitude <- function(x){
if (x == "H|h") return(100)
else if (x == "K"|"k") return(1000)
else if (x == "M"|"m") return(1000000)
else if (x == "B"|"b") return(1000000000)
else return(1)
}
dmgs <- mutate(dmgs, pd = pDmg * magnitude(pMag))
magnitude <- function(x){
if (x == "H" | x == "h") return(100)
else if (x == "K" | x == "k") return(1000)
else if (x == "M" | x == "m") return(1000000)
else if (x == "B" | x == "b") return(1000000000)
else return(1)
}
dmgs <- mutate(dmgs, pd = pDmg * magnitude(pMag))
magnitude <- function(x){
if (x == "H" |  "h") return(100)
else if (x == "K" | "k") return(1000)
else if (x == "M" |  "m") return(1000000)
else if (x == "B" |  "b") return(1000000000)
else return(1)
}
magnitude <- function(x){
if (x == "H" |  "h") return(100)
else if (x == "K" | "k") return(1000)
else if (x == "M" |  "m") return(1000000)
else if (x == "B" |  "b") return(1000000000)
else return(1)
}
dmgs <- mutate(dmgs, pd = pDmg * magnitude(pMag))
magnitude <- function(x){
if (x == "H" |  "h") {
return(100)
} else if (x == "K" | "k") {
return(1000)
} else if (x == "M" |  "m") {
return(1000000)
} else if (x == "B" |  "b") {
return(1000000000)
} else {
return(1)
}
}
dmgs <- mutate(dmgs, pd = pDmg * magnitude(pMag))
magnitude <- function(x){
if (x == "H" |  x == "h") {
return(100)
} else if (x == "K" | x == "k") {
return(1000)
} else if (x == "M" |  x == "m") {
return(1000000)
} else if (x == "B" |  x == "b") {
return(1000000000)
} else {
return(1)
}
}
dmgs <- mutate(dmgs, pd = pDmg * magnitude(pMag))
magnitude <- function(x){
if (x == "H") | (x == "h") {
return(100)
} else if (x == "K") | (x == "k") {
return(1000)
} else if (x == "M") | (x == "m") {
return(1000000)
} else if (x == "B") | (x == "b") {
return(1000000000)
} else {
return(1)
}
}
magnitude <- function(x){
if (x == "H") | (x == "h") {
return(100)
} else if (x == "K") | (x == "k") {
return(1000)
} else if (x == "M") | (x == "m") {
return(1000000)
} else if (x == "B") | (x == "b") {
return(1000000000)
} else {
return(1)
}
}
magnitude <- function(x){
if (x == "H" || x == "h") {
return(100)
} else if (x == "K" || x == "k") {
return(1000)
} else if (x == "M" || x == "m") {
return(1000000)
} else if (x == "B" || x == "b") {
return(1000000000)
} else {
return(1)
}
}
dmgs <- mutate(dmgs, pd = pDmg * magnitude(pMag))
head(dmgs, 100)
dmgs[1000:11000,]
dmgs[1167, ]
25 * 1000000
dmgs$pd[1167]
dmgs <- mutate(dmgs, pd = (pDmg * magnitude(pMag))
dmgs <- mutate(dmgs, pd = (pDmg * magnitude(pMag)))
dmgs[1000:1100, ]
magnitude(dmgs$pMag[1084])
magnitude(dmgs$pMag[1084]) * dmgs$pDmg[1084]
dmgs <- mutate(dmgs, pd = (pDmg * magnitude(pMag)))
magnitude <- function(x){
if (x == "H" || x == "h") {
return(100)
} else if (x == "K" || x == "k") {
return(1000)
} else if (x == "M" || x == "m") {
return(1000000)
} else if (x == "B" || x == "b") {
return(1000000000)
} else {
return(1)
}
}
dmgs <- mutate(dmgs, pd = (pDmg * magnitude(pMag)))
magnitude <- function(x){
if (x == "H" || x == "h") {
return(100)
} else if (x == "K" || x == "k") {
return(1000)
} else if (x == "M" || x == "m") {
return(1000000)
} else if (x == "B" || x == "b") {
return(1000000000)
} else {
return(1)
}
}
dmgs <- mutate(dmgs, pd = (pDmg * magnitude(pMag)))
magnitude <- function(x){
if (x == "H" || x == "h") {
return(100)
} else if (x == "K" || x == "k") {
return(1000)
} else if (x == "M" || x == "m") {
return(1000000)
} else if (x == "B" || x == "b") {
return(1000000000)
} else {
return(1)
}
}
dmgs <- mutate(dmgs, pd = (pDmg * magnitude(pMag)))
debugSource('~/Coursera/repr_research/magnitude.R')
dmgs <- mutate(dmgs, pd = (pDmg * magnitude(pMag)))
magnitude <- function(x){
if (x == "H" || x == "h") {
return(100)
}
else if (x == "K" || x == "k") {
return(1000)
}
else if (x == "M" || x == "m") {
return(1000000)
}
else if (x == "B" || x == "b") {
return(1000000000)
}
else {
return(1)
}
}
magnitude <- function(x){
if (x == "H" || x == "h") {
return(100)
}
else if (x == "K" || x == "k") {
return(1000)
}
else if (x == "M" || x == "m") {
return(1000000)
}
else if (x == "B" || x == "b") {
return(1000000000)
}
else {
return(1)
}
}
dmgs <- mutate(dmgs, pd = (pDmg * magnitude(pMag)))
debugSource('~/Coursera/repr_research/magnitude.R')
dmgs <- mutate(dmgs, pd = (pDmg * magnitude(pMag)))
head(data1)
magnitude <- function(x){
if (x == "H" || x == "h") {
return(100)
}
else if (x == "K" || x == "k") {
return(1000)
}
else if (x == "M" || x == "m") {
return(1000000)
}
else if (x == "B" || x == "b") {
return(1000000000)
}
else {
return(1)
}
}
combine <- function(y){
y[4] * magnitude(y[5])
}
?lapply
combined <- lapply(data1, combine)
i <- lapply(data1$cMag, magnitude)
type(i)
class(i)
str(i)
head(i, 100)
i[1000:1100]
dmgs %>% data1 %>% mutate(pm = magnitude(pMag))
dmgs <- mutate(data1, pm = magnitude(pMag))
dmgs[1000:1100,]
installed.packages()
library(tidyr)
dmgs <- mutate(data1, pm = magnitude(pMag))
dmgs[1000:1100,]
magnitude <- function(x){
if (x %in% c("H","h") {
return(100)
}
else if (x %in% c("K", "k")) {
return(1000)
}
else if (x %in% c("M", "m")) {
return(1000000)
}
else if (x %in% c(0:10)) {
return(10)
}
else {
return(1)
}
}
source('~/Coursera/repr_research/magnitude.R')
magnitude <- function(x){
if (x %in% c("H","h")) {
return(100)
} else if (x %in% c("K", "k")) {
return(1000)
} else if (x %in% c("M", "m")) {
return(1000000)
} else if (x %in% c(0:10)) {
return(10)
} else {
return(1)
}
}
i <- mutate(data1, m = magnitude(pDmg))
str(data1)
data1$pMag <- as.character(data1$pMag)
data1$cMag <- as.character(data1$cMag)
str(data1)
data1$pMag <- tolower(data1$pMag)
data1$cMag <- tolower(data1$cMag)
head(data1, 100)
magnitude <- function(x){
if (x == "h") {
return(100)
} else if (x == "k") {
return(1000)
} else if (x == "m") {
return(1000000)
} else {
return(1)
}
}
d1 <- mutate(data1, pm = magnitude(pMag))
i <- sapply(data1$pMag, magnitude)
head(i)
i[1000:1100]
data2 <- cbind(data1, i)
data2[1000:1100,]
data2 <- cbind(data1, i, sapply(data1$cMag, magnitude))
head(data2)
data1$cMag <- sapply(data1$cMag, magnitude)
head(data1, 100)
data1$p <- sapply(data1$pMag, magnitude)
head(data1, 100)
data1$pMag <- sapply(data1$pMag, magnitude)
head(data1, 100)
file <- "data/repdata_data_StormData.csv.bz2"
rawData <- read.csv(file, header = TRUE)
str(rawData)
library(dplyr)
eventData <- select(rawData, event = EVTYPE, fat = FATALITIES, inj = INJURIES,  pDmg = PROPDMG, pMag = PROPDMGEXP, cDmg = CROPDMG, cMag = CROPDMGEXP)
eventData$pMag <- tolower(as.character(eventData$pMag))
eventData$cMag <- tolower(as.character(eventData$cMag))
# helper function to translate magnitude keys
magnitude <- function(x){
if (x == "h") {
return(100)
} else if (x == "k") {
return(1000)
} else if (x == "m") {
return(1000000)
} else {
return(1)
}
}
# convert magnitude variables to numeric equivalents
eventData$pMag <- sapply(eventData$pMag, magnitude)
eventData$cMag <- sapply(eventData$cMag, magnitude)
eventData <- transmute(eventData, propDmg = pMag * pDmg, cropDmg = cMag * cDmg)
eventData[1000, 1100]
library(dplyr)
eventData <- select(rawData, event = EVTYPE, fat = FATALITIES, inj = INJURIES,  pDmg = PROPDMG, pMag = PROPDMGEXP, cDmg = CROPDMG, cMag = CROPDMGEXP)
eventData$pMag <- tolower(as.character(eventData$pMag))
eventData$cMag <- tolower(as.character(eventData$cMag))
# helper function to translate magnitude keys
magnitude <- function(x){
if (x == "h") {
return(100)
} else if (x == "k") {
return(1000)
} else if (x == "m") {
return(1000000)
} else {
return(1)
}
}
# convert magnitude variables to numeric equivalents
eventData$pMag <- sapply(eventData$pMag, magnitude)
eventData$cMag <- sapply(eventData$cMag, magnitude)
eventData <- transmute(eventData, propDmg = pMag * pDmg, cropDmg = cMag * cDmg)
eventData[1000:1100,]
library(dplyr)
eventData <- select(rawData, event = EVTYPE, fat = FATALITIES, inj = INJURIES,  pDmg = PROPDMG, pMag = PROPDMGEXP, cDmg = CROPDMG, cMag = CROPDMGEXP)
eventData$pMag <- tolower(as.character(eventData$pMag))
eventData$cMag <- tolower(as.character(eventData$cMag))
# helper function to translate magnitude keys
magnitude <- function(x){
if (x == "h") {
return(100)
} else if (x == "k") {
return(1000)
} else if (x == "m") {
return(1000000)
} else {
return(1)
}
}
# convert magnitude variables to numeric equivalents
eventData$pMag <- sapply(eventData$pMag, magnitude)
eventData$cMag <- sapply(eventData$cMag, magnitude)
eventData <-mutate(eventData, pDmg = pMag * pDmg, cDmg = cMag * cDmg)
eventData[1000:1100,]
library(dplyr)
eventData <- select(rawData, event = EVTYPE, fatalities = FATALITIES, injuries = INJURIES,  pDmg = PROPDMG, pMag = PROPDMGEXP, cDmg = CROPDMG, cMag = CROPDMGEXP)
eventData$pMag <- tolower(as.character(eventData$pMag))
eventData$cMag <- tolower(as.character(eventData$cMag))
# helper function to translate magnitude keys
magnitude <- function(x){
if (x == "h") {
return(100)
} else if (x == "k") {
return(1000)
} else if (x == "m") {
return(1000000)
} else {
return(1)
}
}
# convert magnitude variables to numeric equivalents
eventData$pMag <- sapply(eventData$pMag, magnitude)
eventData$cMag <- sapply(eventData$cMag, magnitude)
eventData <- eventData %>%
mutate(eventData, pDmg = pMag * pDmg, cDmg = cMag * cDmg) %>%
select(event, fatalities, injuries, pDmg, cDmg)
library(dplyr)
eventData <- select(rawData, event = EVTYPE, fatalities = FATALITIES, injuries = INJURIES,  pDmg = PROPDMG, pMag = PROPDMGEXP, cDmg = CROPDMG, cMag = CROPDMGEXP)
eventData$pMag <- tolower(as.character(eventData$pMag))
eventData$cMag <- tolower(as.character(eventData$cMag))
# helper function to translate magnitude keys
magnitude <- function(x){
if (x == "h") {
return(100)
} else if (x == "k") {
return(1000)
} else if (x == "m") {
return(1000000)
} else {
return(1)
}
}
# convert magnitude variables to numeric equivalents
eventData$pMag <- sapply(eventData$pMag, magnitude)
eventData$cMag <- sapply(eventData$cMag, magnitude)
eventData <- eventData %>%
mutate(pDmg = pMag * pDmg, cDmg = cMag * cDmg) %>%
select(event, fatalities, injuries, pDmg, cDmg)
eventData[1000:1100,]
library(dplyr)
eventData <- select(rawData, event = EVTYPE, fatalities = FATALITIES, injuries = INJURIES,  pDmg = PROPDMG, pMag = PROPDMGEXP, cDmg = CROPDMG, cMag = CROPDMGEXP)
eventData$pMag <- tolower(as.character(eventData$pMag))
eventData$cMag <- tolower(as.character(eventData$cMag))
# helper function to translate magnitude keys
magnitude <- function(x){
if (x == "h") {
return(100)
} else if (x == "k") {
return(1000)
} else if (x == "m") {
return(1000000)
} else {
return(1)
}
}
# convert magnitude variables to numeric equivalents
eventData$pMag <- sapply(eventData$pMag, magnitude)
eventData$cMag <- sapply(eventData$cMag, magnitude)
eventData <- eventData %>%
mutate(pDmg = pMag * pDmg, cDmg = cMag * cDmg) %>%
mutate(totDmg = pDmg + cDmg) %>%
select(event, fatalities, injuries, pDmg, cDmg)
eventData[1000:1100,]
library(dplyr)
eventData <- select(rawData, event = EVTYPE, fatalities = FATALITIES, injuries = INJURIES,  pDmg = PROPDMG, pMag = PROPDMGEXP, cDmg = CROPDMG, cMag = CROPDMGEXP)
eventData$pMag <- tolower(as.character(eventData$pMag))
eventData$cMag <- tolower(as.character(eventData$cMag))
# helper function to translate magnitude keys
magnitude <- function(x){
if (x == "h") {
return(100)
} else if (x == "k") {
return(1000)
} else if (x == "m") {
return(1000000)
} else {
return(1)
}
}
# convert magnitude variables to numeric equivalents
eventData$pMag <- sapply(eventData$pMag, magnitude)
eventData$cMag <- sapply(eventData$cMag, magnitude)
eventData <- eventData %>%
mutate(pDmg = pMag * pDmg, cDmg = cMag * cDmg) %>%
mutate(totDmg = pDmg + cDmg) %>%
select(event, fatalities, injuries, pDmg, cDmg, totDmg)
eventData[1000:1100,]
table(eventData$event)
str(eventData$event)
eventData$event <- tolower(as.character(eventData$pMagevent))
eventData$event <- tolower(as.character(eventData$event))
events <- eventData$event
table(events)
unique(events)
?grep
source('~/Coursera/repr_research/magnitude.R')
